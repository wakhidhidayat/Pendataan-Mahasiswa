/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kelompok2.pendataanmahasiswa;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart; 
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.jdbc.JDBCCategoryDataset;


/**
 *
 * @author wahid hidayat
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        String[] judul = {"Nama", "NIM", "Email", "Program Studi"};
        model = new DefaultTableModel(judul,0);
        tableMahasiswa.setModel(model);
        showProdi();
        showTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJudul = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textFieldNama = new javax.swing.JTextField();
        textFieldNim = new javax.swing.JTextField();
        textFieldEmail = new javax.swing.JTextField();
        comboBoxProdi = new javax.swing.JComboBox<>();
        buttonAdd = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        buttonChart = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonReset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMahasiswa = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelJudul.setBackground(new java.awt.Color(248, 148, 66));

        jLabel1.setFont(new java.awt.Font("FreeSans", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mahasiswa");

        javax.swing.GroupLayout panelJudulLayout = new javax.swing.GroupLayout(panelJudul);
        panelJudul.setLayout(panelJudulLayout);
        panelJudulLayout.setHorizontalGroup(
            panelJudulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelJudulLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(252, 252, 252))
        );
        panelJudulLayout.setVerticalGroup(
            panelJudulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelJudulLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(44, 62, 80));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Nama");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("NIM");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Email");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Program Studi");

        comboBoxProdi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Pilih -" }));
        comboBoxProdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxProdiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldNama)
                    .addComponent(textFieldNim)
                    .addComponent(textFieldEmail)
                    .addComponent(comboBoxProdi, 0, 198, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldNim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxProdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        buttonAdd.setBackground(new java.awt.Color(34, 167, 240));
        buttonAdd.setForeground(new java.awt.Color(0, 0, 0));
        buttonAdd.setText("Tambah");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonUpdate.setBackground(new java.awt.Color(247, 202, 24));
        buttonUpdate.setForeground(new java.awt.Color(0, 0, 0));
        buttonUpdate.setText("Ubah");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonChart.setBackground(new java.awt.Color(0, 230, 64));
        buttonChart.setForeground(new java.awt.Color(0, 0, 0));
        buttonChart.setText("Grafik");
        buttonChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChartActionPerformed(evt);
            }
        });

        buttonDelete.setBackground(new java.awt.Color(240, 52, 52));
        buttonDelete.setForeground(new java.awt.Color(0, 0, 0));
        buttonDelete.setText("Hapus");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonReset.setBackground(new java.awt.Color(204, 102, 0));
        buttonReset.setForeground(new java.awt.Color(0, 0, 0));
        buttonReset.setText("Reset");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        tableMahasiswa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMahasiswa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMahasiswaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMahasiswa);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonChart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonReset))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(149, 149, 149))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonUpdate)
                    .addComponent(buttonDelete)
                    .addComponent(buttonChart)
                    .addComponent(buttonReset))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelJudul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelJudul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // validasi jika form belum lengkap
        if(textFieldNama.getText().isEmpty() || textFieldNim.getText().isEmpty() || textFieldEmail.getText().isEmpty() || comboBoxProdi.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Form belum lengkap!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            // inisialisasi variabel dan memberi nilai variabel dengan input yang dimasukan
            String nama = textFieldNama.getText();
            String email = textFieldEmail.getText();
            String nim = textFieldNim.getText();
            
            // validasi isi form
            if(!nim.matches(nimRegex)) {
                JOptionPane.showMessageDialog(this, "NIM harus berisi angka!", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else if(!email.matches(emailRegex)) {
                JOptionPane.showMessageDialog(this, "Format email tidak valid!", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                // query untuk insert data ke database
                String sql = "INSERT INTO mahasiswa (nama,nim,email,prodi_id) VALUES ('" + nama + "','" + nim + "','" + email + "','" + prodi_id + "')";
                try {
                    // menjalankan query
                    Connection conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);
                    conn.createStatement().executeUpdate(sql);
                    
                    // alert setelah sukses
                    JOptionPane.showMessageDialog(this, "Sukses menambahkan", "INFO", JOptionPane.INFORMATION_MESSAGE);
                    // menampilkan data hasil query
                    showTable();
                    // mengkosongkan isi text field
                    reset();
                } catch(SQLException e) {
                    e.printStackTrace();
                    if(e.getErrorCode() == 1062) {
                        // alert jika ada duplikasi data
                        JOptionPane.showMessageDialog(this, "Terdapat duplikasi data pada NIM atau Email!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }                
            }
        }        
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChartActionPerformed
        // query untuk menghitung jumlah tiap prodi
        String countProdi = "SELECT prodi.nama,COUNT(prodi_id) AS jumlah FROM mahasiswa JOIN prodi ON mahasiswa.prodi_id=prodi.id GROUP BY prodi.nama";
        try {
            // koneksi ke database
            conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        // buat objek dataset
        JDBCCategoryDataset dataset = new JDBCCategoryDataset(conn);
        try {
            // menjalankan query
            dataset.executeQuery(countProdi);
            // membuat chart
            JFreeChart chart = ChartFactory.createBarChart3D("Grafik Jumlah Prodi yang Diambil Mahasiswa", "Prodi", "Jumlah Mahasiswa",dataset, PlotOrientation.VERTICAL, true, true, false);
            // membuat frame baru dari chart yang sudah dibuat
            ChartFrame frame = new ChartFrame("Frame Chart", chart);
            //menampilkan framenya
            frame.setVisible(true);
            frame.setBounds(500, 200, 500, 500);
        } catch(SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_buttonChartActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        // cek apakah form sudah lengkap
        if(textFieldNama.getText().isEmpty() || textFieldEmail.getText().isEmpty() || comboBoxProdi.getSelectedIndex() == 0) {
            // alert jika form belum lengkap
            JOptionPane.showMessageDialog(this, "Form belum lengkap!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            // inisialisasi variabel dan memberi nilai variabel dengan input yang dimasukan
            String nama = textFieldNama.getText();
            String email = textFieldEmail.getText();
            String nim = textFieldNim.getText();
            
            // validasi isi form
            if(!email.matches(emailRegex)) {
                JOptionPane.showMessageDialog(this, "Format email tidak valid!", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                // query untuk update data
                String sql = "UPDATE mahasiswa set nama='" + nama + "',email='" + email + "',prodi_id='" + prodi_id + "' WHERE nim='" + nim + "'";
                try {
                    // menjalankan query
                    Connection conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);
                    conn.createStatement().executeUpdate(sql);

                    // alert jika sukses
                    JOptionPane.showMessageDialog(this, "Sukses mengubah data", "INFO", JOptionPane.INFORMATION_MESSAGE);
                    // menampilkan table yang berisi data setelah diupdate
                    showTable();
                    // mengkosongkan isi form
                    reset();
                } catch(SQLException e) {
                    e.printStackTrace();
                    if (e.getErrorCode() == 2601) {
                        JOptionPane.showMessageDialog(this, "Duplikasi data Email", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }            
            }            

        }         
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // cek apakah ada baris tabel yang di klik
        if(tableMahasiswa.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Pilih dulu data yang ingin dihapus!", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // query untuk hapus data
        String sql = "DELETE FROM mahasiswa WHERE nim='" + textFieldNim.getText() + "'";
        try {
            // menjalankan query
            Connection conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);
            conn.createStatement().executeUpdate(sql);
            
            // alert setelah data sukses dihapus
            JOptionPane.showMessageDialog(this, "Sukses menghapus data", "INFO", JOptionPane.INFORMATION_MESSAGE);
            // memperbarui table
            showTable();
        } catch(SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        // memanggil method reset
        reset();
    }//GEN-LAST:event_buttonResetActionPerformed

    private void tableMahasiswaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMahasiswaMouseClicked
        // mendapatkan baris dari table yang di klik
        int i = tableMahasiswa.getSelectedRow();
        // proses jika tabel di klik
        if(i > -1) {
            // memberi nilai tiap field dengan nilai dari baris yang di klik
            textFieldNama.setText(model.getValueAt(i, 0).toString());
            textFieldNim.setText(model.getValueAt(i, 1).toString());
            textFieldNim.setEditable(false);
            textFieldEmail.setText(model.getValueAt(i, 2).toString());
            comboBoxProdi.setSelectedItem(model.getValueAt(i, 3).toString());           
        }
    }//GEN-LAST:event_tableMahasiswaMouseClicked

    private void comboBoxProdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxProdiActionPerformed
        // mendapatkan id dari prodi yang dipilih
        getProdiId();
    }//GEN-LAST:event_comboBoxProdiActionPerformed

    private void showTable() {
        // menghapus rows table
        int rows = tableMahasiswa.getRowCount();
        for(int i = 0; i < rows; i++) {
            model.removeRow(0);
        }
        
        // query untuk menampilkan mahasiswa
        String showMahasiswa = "Select mahasiswa.nama,mahasiswa.nim,mahasiswa.email,prodi.nama FROM mahasiswa INNER JOIN prodi ON mahasiswa.prodi_id=prodi.id ORDER BY mahasiswa.id ASC";
        
        try {
            // menjalankan query
            conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);            
            rs = conn.createStatement().executeQuery(showMahasiswa);
            
            // perulangan, selama masih ada data maka isikan baris table dengan data tersebut
            while(rs.next()) {
                String data[] = {rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                model.addRow(data);
            }
        } catch(SQLException e) {
            e.printStackTrace();
            if(e.getErrorCode() == 0) {
                JOptionPane.showMessageDialog(this, "Hidupkan database anda terlebih dahulu!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void showProdi() {
        // query untuk menampilkan prodi
        String showProdi = "SELECT * FROM prodi";
        try {
            // menjalankan query
            conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);
            rs = conn.createStatement().executeQuery(showProdi);
            
            // selama masih ada data, masukan prodi kedalam combobox
            while(rs.next()) {
                Object data[] = new Object[2];
                data[0] = rs.getInt(1);
                data[1] = rs.getString(2);
                comboBoxProdi.addItem(data[1].toString());
            }
        } catch(SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void getProdiId() {
        // query untuk menampilkan id prodi dari prodi yang dipilih combobox
        String showProdi = "SELECT prodi.id FROM prodi WHERE prodi.nama='" + comboBoxProdi.getSelectedItem() + "'";
        try {
            // menjalankan query
            conn = DriverManager.getConnection(CONNECTION, USER, PASSWORD);
            rs = conn.createStatement().executeQuery(showProdi);
            // selama masih ada data, beri nilai prodi_id dengan data tersebut
            while(rs.next()) {
                Object data[] = new Object[1];
                data[0] = rs.getInt(1);
                prodi_id = Integer.parseInt(data[0].toString());
            }
        } catch(SQLException e) {
            e.printStackTrace();
        }        
    }
    
    private void reset() {
        // mengkosongkan input form
        textFieldNama.setText("");
        textFieldEmail.setText("");
        textFieldNim.setText("");
        textFieldNim.setEditable(true);
        comboBoxProdi.setSelectedIndex(0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    // deklarasi variabel
    private DefaultTableModel model;
    private Connection conn = null;
    private ResultSet rs = null;
    private int prodi_id = 0;
    
    // deklarasi regex
    private String nimRegex = "^[0-9]*$";
    private String emailRegex = "^(.+)@(.+)$";
    
    // deklarasi variabel untuk koneksi
    private static final String USER = "root";
    private static final String PASSWORD = "";
    private static final String CONNECTION = "jdbc:mysql://localhost/pendataan_mahasiswa?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonChart;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonReset;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JComboBox<String> comboBoxProdi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelJudul;
    private javax.swing.JTable tableMahasiswa;
    private javax.swing.JTextField textFieldEmail;
    private javax.swing.JTextField textFieldNama;
    private javax.swing.JTextField textFieldNim;
    // End of variables declaration//GEN-END:variables
}
